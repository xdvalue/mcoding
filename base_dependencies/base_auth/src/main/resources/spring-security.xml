<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<!--/ 开启支持方法注解的权限控制： @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 
		@PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。 @PostAuthorize：该注解用来在方法执行完之后进行访问控制检查。 
		@PostFilter：该注解用来对方法的返回结果进行过滤。从返回的集合中过滤掉表达式值为假的元素。如@PostFilter("hasPermission(filterObject, 
		'read')")说明返回的结果中只保留当前用户有读权限的元素。 @PreFilter：该注解用来对方法调用时的参数进行过滤。 -->
	<global-method-security pre-post-annotations="enabled" />

	<!-- 帐号密码 验证 -->
	<beans:bean id="daoAuthenticationProvider"
		class="com.mcoding.base.auth.web.security.impl.CustomDaoAuthenticationProvider">
		<beans:property name="passwordEncoder" ref="customPasswordEncoder" />
		<beans:property name="userDetailsService" ref="customUserDetailsService" />
		<!-- 是否不报出找不到用户名的异常 -->
		<beans:property name="hideUserNotFoundExceptions" value="false" />
	</beans:bean>

	<!-- 登录后授权 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="daoAuthenticationProvider" />
	</authentication-manager>

	<!-- 权限验证拦截器 -->
	<beans:bean id="customFilterSecurityInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor"
		autowire="byType">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="customAccessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="customFilterInvocationSecurityMetadataSource" />
	</beans:bean>

	<!-- 用户权限不够的处理器 -->
	<beans:bean id="customAccessDeniedHandler"
		class="com.mcoding.base.auth.web.security.impl.CustomAccessDeniedHandler">
		<!-- 登录失败跳转的页面 -->
		<beans:property name="errorPage" value="/loginFail.html" />
	</beans:bean>

	<!-- 用户登录入口 -->
	<beans:bean id="customAuthenticationEntryPoint"
		class="com.mcoding.base.auth.web.security.impl.CustomAuthenticationEntryPoint">
		<!-- 未登录时，默认跳转到登录页面 -->
		<beans:constructor-arg name="loginFormUrl" value="/login.html" />
	</beans:bean>

	<!-- 异常处理器,处理：无权限异常，未登录等异常 -->
	<beans:bean id="customExceptionTranslationFilter"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<beans:constructor-arg name="authenticationEntryPoint" ref="customAuthenticationEntryPoint" />
		<beans:property name="accessDeniedHandler" ref="customAccessDeniedHandler" />
	</beans:bean>

    <!-- 登录成功处理器 -->
	<beans:bean id="customAuthenticationSuccessHandler"
		class="com.mcoding.base.auth.web.security.impl.CustomAuthenticationSuccessHandler">
		<!-- 成功后跳转的页面 -->
		<beans:property name="defaultTargetUrl" value="/index.html" /> 
	</beans:bean>

    <!-- 登录失败处理器 -->
	<beans:bean id="customAuthenticationFailureHandler"
		class="com.mcoding.base.auth.web.security.impl.CustomAuthenticationFailureHandler">
		<!-- 失败后跳转的页面 -->
		<beans:property name="defaultFailureUrl" value="/loginFail.html" />
	</beans:bean>
	
	<!-- session 过期，或者没有session时的处理器 -->
	<beans:bean id="customInvalidSessionStrategy" class="com.mcoding.base.auth.web.security.impl.CustomInvalidSessionStrategy">
	    <beans:constructor-arg name="invalidSessionUrl" value="/login.html" />
	</beans:bean>

	<!-- 不拦截静态资源 -->
	<http pattern="/resources/**" security="none" />
	<http pattern="/swagger/**" security="none" />
	<http pattern="/mobileview/**" security="none" />

	<!-- 不拦截API -->
	<http pattern="/*/front/**" security="none" />
	<http pattern="/test/**" security="none" />

	<http pattern="/v2/api-docs" security="none"></http>
	<http pattern="/login.html*" security="none"></http>

	<http request-matcher="ant">

		<intercept-url pattern="/index.html*" access="isFullyAuthenticated()" />

		<custom-filter ref="customExceptionTranslationFilter" after="EXCEPTION_TRANSLATION_FILTER" />
		<custom-filter ref="customFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />

		<csrf disabled="true" />

		<form-login login-page="/login.html" login-processing-url="/loginForSpringSecurity"
			authentication-success-handler-ref="customAuthenticationSuccessHandler"
			authentication-failure-handler-ref="customAuthenticationFailureHandler" />

		<logout logout-success-url="/login.html" />

		<!-- session-fixation-protection 防御会话伪造 -->
		<session-management 
		    session-fixation-protection="migrateSession"
		    invalid-session-strategy-ref="customInvalidSessionStrategy"
            session-authentication-error-url="/refuse.html">

			<concurrency-control error-if-maximum-exceeded="true"
				max-sessions="1" expired-url="/sessionTimeOut.html" />
		</session-management>
	</http>

</beans:beans>
